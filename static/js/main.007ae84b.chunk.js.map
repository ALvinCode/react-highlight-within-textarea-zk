{"version":3,"sources":["../../src/getRanges.js","../../src/getType.js","../../node_modules/style-inject/dist/style-inject.es.js","../../src/extractSpansOfClasses.js","../../src/HighlighedContents.js","../../src/HighlightWithinTextarea.js","App.js","index.js"],"names":["getRanges","input","highlight","instance","type","Array","getType","ranges","arr","getArrayRanges","func","getFunctionRanges","regex","match","getRegExpRanges","str","inputLower","strLower","index","getStringRanges","custom","range","getCustomRanges","console","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Span","this","beginIndex","text","className","c","beginIndex2","rightText","slice","right","Set","key","markClasses","size","HighlighedContents","value","parts","spans","endIndex","i","span","span2","span3","extractSpansOfClasses","styles","part","HighlightWithinTextarea","onChange","containerStyle","containerClassName","textareaProps","onScroll","textareaRef","useRef","backdropRef","useState","fakeValue","setFakeValue","event","data","indexOf","Date","getDay","Example","title","initialValue","highlightText","setValue","Row","Col","target","rows","width","split","push","pop","crToBR","App","Container","maxWidth","border","margin","map","d","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.007ae84b.chunk.js","sourcesContent":["import getType from './getType';\n\nexport default function getRanges(input, highlight) {\n    let type = getType(highlight);\n    switch (type) {\n        case 'array':\n            return getArrayRanges(input, highlight);\n        case 'function':\n            return getFunctionRanges(input, highlight);\n        case 'regexp':\n            return getRegExpRanges(input, highlight);\n        case 'string':\n            return getStringRanges(input, highlight);\n        case 'range':\n            return getRangeRanges(input, highlight);\n        case 'custom':\n            return getCustomRanges(input, highlight);\n        default:\n            if (!highlight) {\n                // do nothing for falsey values\n                return [];\n            } else {\n                console.error('unrecognized highlight type');\n            }\n    }\n}\n\nfunction getArrayRanges (input, arr) {\n    let ranges = arr.map(getRanges.bind(this, input));\n    return Array.prototype.concat.apply([], ranges);\n}\n\nfunction getFunctionRanges(input, func) {\n    return getRanges(input, func(input));\n}\n\nfunction getRegExpRanges(input, regex) {\n    let ranges = [];\n    let match;\n    while (match = regex.exec(input), match !== null) {\n        ranges.push([match.index, match.index + match[0].length]);\n        if (!regex.global) {\n            // non-global regexes do not increase lastIndex, causing an infinite loop,\n            // but we can just break manually after the first match\n            break;\n        }\n    }\n    return ranges;\n}\n\nfunction getStringRanges(input, str) {\n    let ranges = [];\n    let inputLower = input.toLowerCase();\n    let strLower = str.toLowerCase();\n    let index = 0;\n    while (index = inputLower.indexOf(strLower, index), index !== -1) {\n        ranges.push([index, index + strLower.length]);\n        index += strLower.length;\n    }\n    return ranges;\n}\n\nfunction getRangeRanges(input, range) {\n    return [range];\n}\n\nfunction getCustomRanges(input, custom) {\n    let ranges = getRanges(input, custom.highlight);\n    if (custom.className) {\n        ranges.forEach(function(range) {\n            // persist class name as a property of the array\n            if (range.className) {\n                range.className = custom.className + ' ' + range.className;\n            } else {\n                range.className = custom.className;\n            }\n        });\n    }\n    return ranges;\n}\n","// returns identifier strings that aren't necessarily \"real\" JavaScript types\nexport default function getType(instance) {\n    let type = typeof instance;\n    if (!instance) {\n        return 'falsey';\n    } else if (Array.isArray(instance)) {\n        if (instance.length === 2 && typeof instance[0] === 'number' && typeof instance[1] === 'number') {\n            return 'range';\n        } else {\n            return 'array';\n        }\n    } else if (type === 'object') {\n        if (instance instanceof RegExp) {\n            return 'regexp';\n        } else if (instance.hasOwnProperty('highlight')) {\n            return 'custom';\n        }\n    } else if (type === 'function' || type === 'string') {\n        return type;\n    }\n\n    return 'other';\n}","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from 'react';\n\nclass Span {\n    constructor(text, beginIndex) {\n        this.beginIndex = beginIndex;\n        this.endIndex = beginIndex + text.length; // Like String.slice, it is inclusive.\n        this.text = text;\n        this.isMark = false;\n        this.markClasses = new Set();\n    }\n\n    setMark(className) {\n        this.isMark = true;\n        if (className) {\n            for (let c of className.split(' ')) {\n                this.markClasses.add(c);\n            }\n        }\n    }\n\n    carve(beginIndex2) {\n        // Carves self to take a bit off the right and returns that carving.\n        let rightText = this.text.slice(beginIndex2 - this.beginIndex);\n        this.text = this.text.slice(0, beginIndex2 - this.beginIndex);\n        this.endIndex = beginIndex2;\n\n        let right = new Span(rightText, beginIndex2);\n        right.isMark = this.isMark;\n        right.markClasses = new Set([...this.markClasses]);\n\n        return right;\n    }\n\n    get className() {\n        if (this.markClasses && this.markClasses.size > 0) {\n            return [...this.markClasses].sort().join(\" \");\n        } else {\n            return \"\";\n        }\n    }\n\n    render() {\n        if (this.isMark) {\n            let className = this.className;\n            if (className) {\n                return(\n                    <mark key={this.beginIndex} className={className}>\n                        {this.text}\n                    </mark>\n                );\n            } else {\n                return(<mark key={this.beginIndex}>{this.text}</mark>);\n            }\n        } else {\n            return(<span key={this.beginIndex}>{this.text}</span>);\n        }\n    }\n}\n\nexport default function extractSpansOfClasses(value, ranges) {\n    /* Returns value broken into a series of Span classes.  These\n     * can be converted to JSX via the render command.\n     */\n    \n    let spans = [new Span(value, 0)];\n\n    for (let range of ranges) {\n        let beginIndex = range[0];\n        let endIndex = range[1];\n        let className = range.className;\n\n        for (let i = 0; i < spans.length; i++) {\n            let span = spans[i];\n\n            // since spans are sorted, So this is always true: beginIndex >= span.beginIndex.\n            if (beginIndex < span.endIndex) {\n                if (beginIndex == span.beginIndex) {\n                    if (endIndex < span.endIndex) {\n                        // [range]\n                        // [s  p  a  n]\n                        let span2 = span.carve(endIndex);\n                        span.setMark(className);\n                        spans.splice(i + 1, 0, span2);\n                        beginIndex = endIndex;\n                        i += 1;\n                    } else {\n                        // [range]   or   [r a n g e]\n                        // [span-]        [span]\n                        span.setMark(className);\n                        beginIndex = span.endIndex;\n                    }\n                } else {\n                    if (endIndex < span.endIndex) {\n                        //   [range]\n                        // [s  p  a  n]\n                        let span2 = span.carve(beginIndex);\n                        let span3 = span2.carve(endIndex);\n                        span2.setMark(className);\n                        spans.splice(i + 1, 0, span2, span3);\n                        beginIndex = endIndex;\n                        i += 2;\n                    } else {\n                        //   [range]  or     [range]\n                        // [s p a n]       [span]\n                        let span2 = span.carve(beginIndex);\n                        span2.setMark(className);\n                        spans.splice(i + 1, 0, span2);\n                        beginIndex = span2.endIndex;\n                        i += 1;\n                    }\n                }\n            }\n            if (beginIndex == endIndex) {\n                break;\n            }\n        }\n    }\n    return spans;\n}","import React from 'react';\nimport styles from './styles/styles.css';\nimport getRanges from './getRanges';\nimport extractSpansOfClasses from './extractSpansOfClasses';\n\nconst HighlighedContents = ({value, highlight}) => {\n    \n    let ranges = getRanges(value, highlight);\n    let parts = extractSpansOfClasses(value, ranges);\n\n    return (\n        <div>\n            <div className={`${styles.highlights} ${styles.content}`} >\n                {parts.map(part => part.render())}\n             </div>\n        </div>\n    );       \n}\n\nexport default HighlighedContents","import React, { useState, useRef } from 'react';\nimport styles from './styles/styles.css';\nimport HighlighedContents from './HighlighedContents';\n\nexport const HighlightWithinTextarea = ({value, onChange, highlight={}, className = \"\",  style={}, containerStyle={}, containerClassName=\"\", onScroll, ...textareaProps}) => {\n  let containerProps = {}\n  const textareaClassName = `${styles.input} ${styles.content}`;\n  const textareaRef = useRef(null);\n  const backdropRef = useRef(null);\n\n  className = `${styles.input} ${styles.content} ${className}`;\n  containerClassName = `${styles.container} ${containerClassName}`;\n\n  // Resizing is currently not supported\n  style.resize = \"none\";\n\n  // To properly work, value and onChange must be supplied.  Give a hint for new users.\n  const [fakeValue, setFakeValue] = useState(\"Please supply a value and an onChange parameter.\");\n  if (value == undefined) {\n    value = fakeValue;\n    onChange = event => {setFakeValue(event.target.value)};\n  }\n  \n  const handleScroll = event => {\n    backdropRef.current.scrollTop = textareaRef.current.scrollTop;\n    backdropRef.current.scrollLeft = textareaRef.current.scrollLeft;\n    console.log('handleScroll')\n  };\n  const blockContainerScroll = event => { console.log('blockContainerScroll')};\n\n  return (\n    <div className={containerClassName} style={containerStyle} onScroll={blockContainerScroll} >\n      <div className={styles.backdrop} ref={backdropRef}>\n        <HighlighedContents value={value} highlight={highlight}>\n        </HighlighedContents>\n      </div>\n      <textarea value={value} onChange={onChange} style={style} className={className} {...textareaProps} onScroll={handleScroll} ref={textareaRef} >\n      </textarea>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { HighlightWithinTextarea }  from 'react-highlight-within-textarea'\n\nlet data = [[\n  \"String\",\n  \"Note that this is case-insensitive.\",\n  \"Potato potato tomato potato.\",\n  `'potato'`,\n  'potato'\n],[\n  \"RegExp\",\n  <span>Don't forget the <code>g</code> (find all) and <code>i</code> (case-insensitive) flags if you need them.</span>,\n  \"Dog, cat, chicken, goose. Dogs, cats, chickens, geese.\",\n  `/dogs?|cats?|g(oo|ee)se/gi`,\n  /dogs?|cats?|g(oo|ee)se/gi\n],[\n  \"Array of Two Numbers (Range)\",\n  \"An array of exactly two numbers is treated as a range. Highlighting starts at the first character index (inclusive) and ends at the second character index (exclusive).\",\n  \"abcdefgh\",\n  \"[2, 6]\",\n  [2, 6]\n], [\n  \"Array of Other Things\",\n  \"You can highlight multiple things, using any types mentioned here, with an array.\",\n  \"apple watermelon banana orange mango\",\n  `[\n    'orange',\n    /ba(na)*/gi,\n    [0, 5]\n  ]`,\n  [ 'orange', /ba(na)*/gi, [0, 5] ]\n], [\n  \"Function\",\n  <span>You can use a function for custom logic. It can return any of the types mentioned here. Return anything falsey (<code>false</code>, <code>undefined</code>, etc.) to indicate no highlighting. The current textarea input is provided to it for convenience.</span>,\n  \"Sun Mon Tue Wed Thu Fri Sat :) <-- remove the smiley...\",\n   `function getSmileyDayString(input) {\n    const dayStrings = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n    if (input.indexOf(':)') !== -1) {\n        let dayIndex = (new Date()).getDay();\n        return dayStrings[dayIndex];\n    } else {\n        // no smiley, no highlighting\n        return false;\n    }\n  }`,\n  function getSmileyDayString(input) {\n    const dayStrings = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n    if (input.indexOf(':)') !== -1) {\n        let dayIndex = (new Date()).getDay();\n        return dayStrings[dayIndex];\n    } else {\n        // no smiley, no highlighting\n        return false;\n    }\n  }\n], [\n  \"Custom Object (with Class Name)\",\n  <span>Any type mentioned here can be put in an object wrapper with <code>highlight</code> and <code>className</code> properties. This lets you set CSS classes in the highlight markup for custom styling, such as changing the highlight color.</span>,\n  `Here's a blueberry. There's a strawberry. Surprise, it's a banananana! <h1>hello</h1>`,\n  `[\n    {\n      highlight: 'strawberry',\n      className: 'red'\n    },\n    {\n      highlight: 'blueberry',\n      className: 'blue'\n    },\n    {\n      highlight: /ba(na)*/gi,\n      className: 'yellow'\n    }\n  ]`,\n  [\n    {\n      highlight: 'strawberry',\n      className: 'red'\n    },\n    {\n      highlight: 'blueberry',\n      className: 'blue'\n    },\n    {\n      highlight: /ba(na)*/gi,\n      className: 'yellow'\n    }\n  ]\n]];\n\n\nconst crToBR = (text) => {\n  let split = text.split(\"\\n\");\n  let arr = [];\n\n  for (const index in split) {\n    arr.push(<span key={index}>{split[index]}</span>);\n    arr.push(<br key={\"b\" + index} />);\n  }\n  arr.pop();\n  return arr;\n}\n\nconst Example = ({title, text, initialValue, highlightText, highlight}) => {\n  const [value, setValue] = useState(initialValue);\n\n  return (\n    <Row>\n      <Col>\n        <h2>{title}</h2>\n        <p>{text}</p>\n        <HighlightWithinTextarea\n          value={value}\n          highlight={highlight}\n          onChange= {event => setValue(event.target.value)}\n          rows=\"4\"\n          containerStyle={{width: \"100%\"}}\n          style={{width: \"100%\"}}\n        />\n        <pre>\n          function Demo() {\"{\"}<br />\n          {\"  \"}const highlight = {crToBR(highlightText)};<br /><br />\n          {\"  \"}{\"return <HighlightWithinTextarea highlight={highlight} />;\"}<br />\n          {\"}\"}\n        </pre>\n      </Col>\n  </Row>\n  )\n}\n\nconst App = () => {\n  return (\n    <Container style={{maxWidth: 800, border: 20, margin: 'auto'}}>\n      {\n        data.map( (d) =>\n          <Example\n            key={d[0]}\n            title={d[0]}\n            text={d[1]}\n            initialValue={d[2]}\n            highlightText={d[3]}\n            highlight={d[4]}\n          />\n        )\n      }\n    </Container>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}