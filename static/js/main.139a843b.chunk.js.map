{"version":3,"sources":["App.js","index.js"],"names":["data","input","indexOf","Date","getDay","highlight","className","enhancement","props","content","style","whiteSpace","JSON","stringify","maxHeight","maxWidth","zIndex","backgroundColor","useState","color","setColor","colorText","toString","useEffect","timer","setInterval","clearInterval","width","height","Example","title","text","initialValue","highlightText","value","setValue","Row","Col","onChange","event","target","rows","containerStyle","split","arr","index","push","key","pop","crToBR","App","Container","border","margin","map","d","ReactDOM","render","document","getElementById"],"mappings":"8UAgCA,IAAIA,EAAO,CAAC,CACV,SACA,sCACA,+BAHU,WAKV,UACA,CACA,SACA,kDAAuB,mCAAvB,mBAAqD,mCAArD,+CACA,yDAHA,6BAKA,4BACA,CACA,+BACA,0KACA,WACA,SACA,CAAC,EAAG,IACH,CACD,wBACA,oFACA,uCAHC,sDASD,CAAE,SAAU,YAAa,CAAC,EAAG,KAC5B,CACD,WACA,iJAAsH,uCAAtH,KAA0I,2CAA1I,sGACA,0DAHC,sUAcD,SAA4BC,GAE1B,OAA6B,IAAzBA,EAAMC,QAAQ,OADC,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAE1C,IAAIC,MAAQC,YAOjC,CACD,kCACA,8FAAmE,2CAAnE,QAA8F,2CAA9F,gIAFC,wSAkBD,CACE,CACEC,UAAW,aACXC,UAAW,OAEb,CACED,UAAW,YACXC,UAAW,QAEb,CACED,UAAW,YACXC,UAAW,YAGd,CACD,iDACA,+GAFC,s+BAwCD,CACE,CACED,UAAW,eACXE,YAvJN,SAAiBC,GACf,IAAMC,EACJ,yBAAKC,MAAO,CAACC,WAAY,QACtBC,KAAKC,UAAUL,EAAO,EAAG,IAG9B,OACE,kBAAC,IAAD,CAAOC,QAASA,EAASK,UAAU,QAAQC,SAAS,SAClD,yBAAKL,MAAO,CAACM,OAAQ,EAAGC,gBAAiB,mBAgJzCX,UAAW,UAEb,CACED,UAAW,OACXE,YA/IN,SAAoBC,GAAQ,IAAD,EACCU,mBAAS,UADV,mBAClBC,EADkB,KACXC,EADW,KAEnBC,EAAS,WAAOF,EAAMG,SAAS,KAMrC,OAJAC,oBAAU,KACR,IAAMC,EAAQC,YAAY,IAAML,EAAS,SAAYD,EAAQ,SAAY,UAAW,KACpF,MAAO,IAAMO,cAAcF,KAEtB,yBAAKd,MAAO,CAACiB,MAAO,OAAQC,OAAQ,OAAQX,gBAAiBI,MAwIhEf,UAAW,WAkBXuB,EAAU,EAAEC,QAAOC,OAAMC,eAAcC,gBAAe5B,gBAAgB,IAAD,EAC/Ca,mBAASc,GADsC,mBAClEE,EADkE,KAC3DC,EAD2D,KAGzE,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,4BAAKP,GACL,2BAAIC,GACJ,kBAAC,IAAD,CACEG,MAAOA,EACP7B,UAAWA,EACXiC,SAAWC,GAASJ,EAASI,EAAMC,OAAON,OAC1CO,KAAK,IACLC,eAAgB,CAACf,MAAO,QACxBjB,MAAO,CAACiB,MAAO,UAEjB,gDACmB,IAAI,6BACpB,KAFH,qBA5BQI,KACd,IAAIY,EAAQZ,EAAKY,MAAM,MACnBC,EAAM,GAEV,IAAK,IAAMC,KAASF,EAClBC,EAAIE,KAAK,0BAAMC,IAAKF,GAAQF,EAAME,KAClCD,EAAIE,KAAK,wBAAIC,IAAK,IAAMF,KAG1B,OADAD,EAAII,MACGJ,GAqB0BK,CAAOhB,GAFlC,IAEkD,6BAAM,6BACrD,KAAM,4DAA4D,6BAClE,QA0BIiB,EAnBH,IAER,kBAACC,EAAA,EAAD,CAAWzC,MAAO,CAACK,SAAU,IAAKqC,OAAQ,GAAIC,OAAQ,SAElDrD,EAAKsD,IAAMC,GACT,kBAAC1B,EAAD,CACEkB,IAAKQ,EAAE,GACPzB,MAAOyB,EAAE,GACTxB,KAAMwB,EAAE,GACRvB,aAAcuB,EAAE,GAChBtB,cAAesB,EAAE,GACjBlD,UAAWkD,EAAE,OCrNzBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.139a843b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { HighlightWithinTextarea }  from 'react-highlight-within-textarea'\nimport Tippy from '@tippyjs/react';\nimport 'tippy.js/dist/tippy.css';\n\nfunction ToolTip(props) {\n  const content = (\n    <div style={{whiteSpace: \"pre\"}}>\n      {JSON.stringify(props, 0, 1)}\n    </div>\n  )\n  return (\n    <Tippy content={content} maxHeight=\"800px\" maxWidth=\"800px\">\n      <div style={{zIndex: 1, backgroundColor: \"transparent\"}}></div>\n    </Tippy>\n  )\n}\n\nfunction MultiColor(props) {\n  const [color, setColor] = useState(0xff8800);\n  const colorText = `#${color.toString(16)}`\n\n  useEffect(() => {\n    const timer = setInterval(() => setColor(0x808080 | (color + 0x102030) % 0xFFFFFF), 200)\n    return () => clearInterval(timer)\n  })\n  return <div style={{width: \"100%\", height: \"100%\", backgroundColor: colorText}} />\n}\n\nlet data = [[\n  \"String\",\n  \"Note that this is case-insensitive.\",\n  \"Potato potato tomato potato.\",\n  `'potato'`,\n  'potato'\n],[\n  \"RegExp\",\n  <span>Don't forget the <code>g</code> (find all) and <code>i</code> (case-insensitive) flags if you need them.</span>,\n  \"Dog, cat, chicken, goose. Dogs, cats, chickens, geese.\",\n  `/dogs?|cats?|g(oo|ee)se/gi`,\n  /dogs?|cats?|g(oo|ee)se/gi\n],[\n  \"Array of Two Numbers (Range)\",\n  \"An array of exactly two numbers is treated as a range. Highlighting starts at the first character index (inclusive) and ends at the second character index (exclusive).\",\n  \"abcdefgh\",\n  \"[2, 6]\",\n  [2, 6]\n], [\n  \"Array of Other Things\",\n  \"You can highlight multiple things, using any types mentioned here, with an array.\",\n  \"apple watermelon banana orange mango\",\n  `[\n    'orange',\n    /ba(na)*/gi,\n    [0, 5]\n  ]`,\n  [ 'orange', /ba(na)*/gi, [0, 5] ]\n], [\n  \"Function\",\n  <span>You can use a function for custom logic. It can return any of the types mentioned here. Return anything falsey (<code>false</code>, <code>undefined</code>, etc.) to indicate no highlighting. The current textarea input is provided to it for convenience.</span>,\n  \"Sun Mon Tue Wed Thu Fri Sat :) <-- remove the smiley...\",\n   `function getSmileyDayString(input) {\n    const dayStrings = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n    if (input.indexOf(':)') !== -1) {\n        let dayIndex = (new Date()).getDay();\n        return dayStrings[dayIndex];\n    } else {\n        // no smiley, no highlighting\n        return false;\n    }\n  }`,\n  function getSmileyDayString(input) {\n    const dayStrings = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n    if (input.indexOf(':)') !== -1) {\n        let dayIndex = (new Date()).getDay();\n        return dayStrings[dayIndex];\n    } else {\n        // no smiley, no highlighting\n        return false;\n    }\n  }\n], [\n  \"Custom Object (with Class Name)\",\n  <span>Any type mentioned here can be put in an object wrapper with <code>highlight</code> and <code>className</code> properties. This lets you set CSS classes in the highlight markup for custom styling, such as changing the highlight color.</span>,\n  `Here's a blueberry. There's a strawberry. Surprise, it's a banananana!`,\n  `[\n    {\n      highlight: 'strawberry',\n      className: 'red'\n    },\n    {\n      highlight: 'blueberry',\n      className: 'blue'\n    },\n    {\n      highlight: /ba(na)*/gi,\n      className: 'yellow'\n    }\n  ]`,\n  [\n    {\n      highlight: 'strawberry',\n      className: 'red'\n    },\n    {\n      highlight: 'blueberry',\n      className: 'blue'\n    },\n    {\n      highlight: /ba(na)*/gi,\n      className: 'yellow'\n    }\n  ],\n], [\n  \"Coming Soon: Custom Object (with Enhancements)\",\n  <span>The div behind the highlighted span can have enhancement javascript injected.</span>,\n  `Here's a blueberry. There's a strawberry.`,\n  `[\n    {\n      highlight: /[^ ]*berry/gi,\n      enhancement: ToolTip,\n      className: 'yellow',\n    },\n    {\n      highlight: 'blue',\n      enhancement: MultiColor,\n      className: 'blue',\n    },\n  ]\n\n  function ToolTip(props) {\n    const content = (\n      <div style={{whiteSpace: \"pre\"}}>\n        {JSON.stringify(props, 0, 1)}\n      </div>\n    )\n    return (\n      <Tippy content={content} maxHeight=\"800px\" maxWidth=\"800px\">\n        <div style={{zIndex: 1, backgroundColor: \"transparent\"}}></div>\n      </Tippy>\n    )\n  }\n\n  function MultiColor(props) {\n    const [color, setColor] = useState(0xff8800);\n    const colorText = \\`#\\${color.toString(16)}\\`\n\n    useEffect(() => {\n      const timer = setInterval(() => setColor(0x808080 | (color + 0x102030) % 0xFFFFFF), 200)\n      return () => clearInterval(timer)\n    })\n    return <div style={{width: \"100%\", height: \"100%\", backgroundColor: colorText}} />\n  }`,\n  [\n    {\n      highlight: /[^ ]*berry/gi,\n      enhancement: ToolTip,\n      className: 'yellow',\n    },\n    {\n      highlight: 'blue',\n      enhancement: MultiColor,\n      className: 'blue',\n    },\n  ]\n]];\n\n\nconst crToBR = (text) => {\n  let split = text.split(\"\\n\");\n  let arr = [];\n\n  for (const index in split) {\n    arr.push(<span key={index}>{split[index]}</span>);\n    arr.push(<br key={\"b\" + index} />);\n  }\n  arr.pop();\n  return arr;\n}\n\nconst Example = ({title, text, initialValue, highlightText, highlight}) => {\n  const [value, setValue] = useState(initialValue);\n\n  return (\n    <Row>\n      <Col>\n        <h2>{title}</h2>\n        <p>{text}</p>\n        <HighlightWithinTextarea\n          value={value}\n          highlight={highlight}\n          onChange= {event => setValue(event.target.value)}\n          rows=\"4\"\n          containerStyle={{width: \"100%\"}}\n          style={{width: \"100%\"}}\n        />\n        <pre>\n          function Demo() {\"{\"}<br />\n          {\"  \"}const highlight = {crToBR(highlightText)};<br /><br />\n          {\"  \"}{\"return <HighlightWithinTextarea highlight={highlight} />;\"}<br />\n          {\"}\"}\n        </pre>\n      </Col>\n  </Row>\n  )\n}\n\nconst App = () => {\n  return (\n    <Container style={{maxWidth: 800, border: 20, margin: 'auto'}}>\n      {\n        data.map( (d) =>\n          <Example\n            key={d[0]}\n            title={d[0]}\n            text={d[1]}\n            initialValue={d[2]}\n            highlightText={d[3]}\n            highlight={d[4]}\n          />\n        )\n      }\n    </Container>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}